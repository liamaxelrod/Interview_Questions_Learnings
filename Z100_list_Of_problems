JavaScript / Coding Problems (Algorithmic & JS Logic)
1. Reverse a string
2. Reverse an array in-place
3. Two-sum problem
4. FizzBuzz
5. solved: Palindrome check (string and number)
6. Find duplicates in an array
7. Merge two sorted arrays
8. Flatten a nested array
9. Sum of array elements / average
10. Maximum subarray sum (Kadane’s algorithm)
11. Find first non-repeating character
12. Reverse words in a sentence
13. Implement map, filter, reduce functions
14. Remove duplicates from array
15. Check balanced parentheses
16. Implement a stack using arrays
17. Implement a queue using arrays
18. Find missing number in array
19. Count occurrences of each character in a string
20. Deep clone an object

HTML & CSS / Front-End Concepts
21. Semantic HTML – explain <section>, <article>, <header>
22. Difference between id and class
23. Flexbox layout: align-items vs justify-content
24. CSS Grid: creating a 3-column layout
25. Responsive design using media queries
26. Difference between relative, absolute, fixed, sticky positioning
27. Z-index and stacking context
28. CSS specificity and inheritance
29. Difference between inline, block, inline-block
30. CSS transitions vs animations

React / Framework Questions
31. Difference between class and functional components
32. React component lifecycle methods
33. React hooks: useState, useEffect
34. Controlled vs uncontrolled components
35. React key prop and why it’s important
36. Context API vs Redux
37. Memoization: React.memo, useMemo, useCallback
38. Lifting state up
39. Event handling in React
40. Conditional rendering

Front-End Browser / Web Concepts
41. Event bubbling and capturing
42. Debounce vs throttle
43. Difference between var, let, const
44. Difference between == and ===
45. Call, apply, bind
46. Closure and scope chain
47. Promises, async/await
48. LocalStorage vs SessionStorage vs Cookies
49. Fetch API vs Axios
50. Browser rendering and reflow/repaint

Backend / Full-Stack Coding & Algorithms (Java, JS, Python, etc.)
51. Reverse a linked list (iterative & recursive)
52. Detect a cycle in a linked list
53. Merge two sorted linked lists
54. Find nth node from end in a linked list
55. Implement a queue using stacks
56. Implement a stack using queues
57. Binary tree traversal (in-order, pre-order, post-order)
58. Level-order traversal (BFS) of a binary tree
59. Lowest common ancestor in a binary tree
60. Depth-first search (DFS) in a graph
61. Breadth-first search (BFS) in a graph
62. Detect cycle in a directed/undirected graph
63. Topological sort
64. Implement a hash map from scratch
65. Implement LRU cache
66. Two-sum / Three-sum / K-sum
67. Longest substring without repeating characters
68. Longest common subsequence
69. Maximum subarray sum (Kadane’s algorithm)
70. String pattern matching (KMP / Rabin-Karp)

Databases / SQL
71. Write SQL to find duplicate records
72. SQL joins: INNER, LEFT, RIGHT, FULL
73. SQL aggregation: GROUP BY, HAVING, COUNT, SUM, AVG
74. Find the nth highest salary
75. Find employees with no manager
76. SQL subqueries vs joins
77. Indexing and query optimization
78. Transactions and ACID properties
79. Normalization (1NF, 2NF, 3NF)
80. Difference between SQL and NoSQL

System Design / Architecture
81. Design a URL shortener (like bit.ly)
82. Design a caching system (like Redis use cases)
83. Design a rate limiter
84. Design a messaging queue / pub-sub system
85. Design a file upload service
86. Design a web scraping service
87. Design a notification system
88. Design a scalable API for CRUD operations
89. Explain load balancers and horizontal scaling
90. Database sharding and replication

Backend Concepts / Web Fundamentals
91. REST vs GraphQL
92. HTTP methods (GET, POST, PUT, DELETE)
93. HTTP status codes
94. Authentication vs Authorization (JWT, OAuth)
95. Session vs token-based auth
96. Cookies vs localStorage vs sessionStorage
97. CORS and how to fix related errors
98. WebSockets vs HTTP requests
99. Microservices vs monolith architecture
100. Message queues (RabbitMQ, Kafka)